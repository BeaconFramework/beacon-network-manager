#!/usr/bin/env ruby

#------------------------------------------------------------------------------#
# Copyright 2010-2015, OpenNebula Systems                                      #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
#------------------------------------------------------------------------------#

FSDN_CLIENT_LOCATION = File.dirname __FILE__


RUBY_LIB_LOCATION = File.expand_path("../lib", FSDN_CLIENT_LOCATION)

$: << RUBY_LIB_LOCATION
$: << File.expand_path("../../lib", FSDN_CLIENT_LOCATION)

require 'federatedsdn_client'

require 'command_parser'
require 'cli_helper'

require 'rubygems'
require 'json'

USER_AGENT = "CLI"

#
# Options
#

DEFAULT_OPTIONS = [
    ENDPOINT = {
        :name => "server",
        :short => "-s url",
        :large => "--server url",
        :format => String,
        :description => "FederatedSDN endpoint"
    },
    USERNAME={
        :name => "username",
        :short => "-u name",
        :large => "--username name",
        :format => String,
        :description => "User name"
    },
    PASSWORD={
        :name => "password",
        :short => "-p pass",
        :large => "--password pass",
        :format => String,
        :description => "User password"
    }
]

JSON_FORMAT={
    :name => "json",
    :short => "-j",
    :large => "--json",
    :description => "Show in JSON format"
}

#
# Table
#
TABLE = CLIHelper::ShowTable.new(nil, self) do
    column :ID, "NetSeg", :size=>6 do |d|
        d["id"]
    end

    column :NAME, "Name", :size=>25 do |d|
        d["name"]
    end

    column :FAENDPOINT, "FA_Endpoint", :size=>40 do |d|
        d["fa_endpoint"]
    end

    column :FEDNETID, "Fednet_ID", :size=>4 do |d|
        d["fednet_id"]
    end

    column :SITEID, "Site_ID", :size=>4 do |d|
        d["site_id"]
    end    

    default :ID, :NAME, :FAENDPOINT, :FEDNETID, :SITEID
end

#
# Commands
#

cmd=CommandParser::CmdParser.new(ARGV) do
    usage "`fsdn-netseg` <command> [<args>] [<options>]"
    version FederatedSDN::VERSION_TEXT

    set :option, DEFAULT_OPTIONS
    set :option, CommandParser::VERSION

    #
    # List
    #

    list_desc = <<-EOT.unindent
        List available network segments
    EOT

    command :list, list_desc, :fednet_id, :site_id, :options => JSON_FORMAT do
        client = FederatedSDN::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.get_netsegments(args[0], args[1])

        if FederatedSDN::is_error?(response)
            if options[:json]
                [response.code.to_i, response.to_s]
            else
                puts "Server returned a"\
                     " #{response.code} error code. Please rerun with --json"\
                     " to see the full error message"
                -1
            end
        else
            if options[:json]
                [0,response.body]
            else
                array_list = JSON.parse(response.body)
                TABLE.show(array_list)
                0
            end
        end
    end

    #
    # Create
    #

    create_desc = <<-EOT.unindent
        Create a new network segment from a json description on a file, from a particular 
        site and in a particular federation network
    EOT

    command :create, create_desc, :fednet_id, :site_id, :file, :options => JSON_FORMAT do
        client = FederatedSDN::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.create_netsegment(args[0], args[1], File.read(args[2]))

        if FederatedSDN::is_error?(response)
            if options[:json]
                [response.code.to_i, response.to_s]
            else
                puts "Server returned a "\
                     "#{response.code} error code."
                [response.code.to_i, response.to_s]
            end
        else
            [0, response.body]
        end
    end

    #
    # Show
    #
    show_desc = <<-EOT.unindent
        Show detailed information of a given network segment
    EOT

    command :show, show_desc, :fednet_id, :site_id, :id, :options => JSON_FORMAT do
        client = FederatedSDN::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.get_netsegment(args[0], args[1], args[2])

        if FederatedSDN::is_error?(response)
            if options[:json]
                [response.code.to_i, response.to_s]
            else
                puts "Server returned a "\
                     "#{response.code} error code. Please rerun with --json"\
                     " to see the full error message"
            end
        else
            [0,response.body]
        end
    end

    #
    # Delete
    #

    delete_desc = <<-EOT.unindent
        Delete a given network segment
    EOT

    command :delete, delete_desc, :fednet_id, :site_id, :id, :options => JSON_FORMAT do
        client = FederatedSDN::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.delete_netsegment(args[0], args[1], args[2])

        if FederatedSDN::is_error?(response)
            if options[:json]
                [response.code.to_i, response.to_s]
            else
                puts "Server returned a "\
                     "#{response.code} error code. Please rerun with --json"\
                     " to see the full error message"
            end
        else
            [0,response.body]
        end
    end

    #
    # Update
    #

    update_desc = <<-EOT.unindent
        Update a network segment
    EOT

    command :update, update_desc, :fednet_id, :site_id, :id, :file, :options => JSON_FORMAT do
        client = FederatedSDN::Client.new(
                    options[:username],
                    options[:password],
                    options[:server],
                    USER_AGENT)

        response = client.update_netsegment(args[0], args[1], args[2],File.read(args[3]))

        if FederatedSDN::is_error?(response)
            if options[:json]
                [response.code.to_i, response.to_s]
            else
                puts "Server returned a "\
                     "#{response.code} error code. Please rerun with --json"\
                     " to see the full error message"
            end
        else
            [0, response.body]
        end
    end
end
