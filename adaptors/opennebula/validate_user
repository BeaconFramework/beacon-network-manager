#!/usr/bin/env ruby

#------------------------------------------------------------------------------#
# Copyright 2010-2015, OpenNebula Systems                                      #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
#------------------------------------------------------------------------------#

$: << ".."

require 'opennebula'
require 'base64'
require 'json'

# Read from stdin

json_in = JSON.parse(Base64.decode64(STDIN.read))

username = json_in["username"]
password = json_in["password"]
endpoint = json_in["cmp_endpoint"]

client    = OpenNebula::Client.new("#{username}:#{password}",
                                   endpoint)
user_pool = OpenNebula::UserPool.new(client)
rc        = user_pool.info

if !rc
	return_code = 0
	errormsg    = ""
	token       = ""
    tenant_id   = user_pool.to_hash["USER_POOL"]["USER"][0]["ID"]
else
	return_code = 1
	errormsg    = "User not valid or not found."
	token       = ""
    tenant_id   = ""
end

output = {:returncode  => return_code,
		  :errormsg    => errormsg,
		  :token       => "",
		  :tenant_id   => tenant_id}

puts Base64.encode64(JSON.pretty_generate(output)).gsub("\n","")
